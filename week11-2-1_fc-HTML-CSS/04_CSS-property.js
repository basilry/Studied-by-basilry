// <1> 개요

// 속성 : property
// css속성 시간에는, 코드도 중요하지만 코드가 어떻게 화면에 구현될지 상상하는 것도 중요함.
// 대부분의 속성개념들은 부모요소-자식요소가 있을 시, 부모요소를 기준으로 자식요소의 속성을 정함.

// (1) 박스모델 : html의 요소라는 하나의 박스를 제어하는 역할
// (2) 글꼴, 문자 : 폰트나 서체를 제어하는 개념
// (3) 배경 : 배경색상이나 배경이미지를 넣어 제어할 수 있는 개념
// (4) 배치 : 어떤 특정 요소를 내가 원하는 위치에 갖다 놓는 역할
// (5) 플렉스(정렬) : 여러 요소들을 순서대로 수평정렬을 할 때(이게 도입 전 띄움 기능을 사용했음)
// (6) 전환 : 요소의 전 상태와 후 상태를 자연스럽게 애니메이션 효과를 주는 역할
// (7) 변환 : 요소를 회전시키거나 이동시키거나 하는 변화를 주는 css 효과
// (8) 띄움 : 요소를 공중에 띄우는 역할. 요소가 띄워지면 그 근처에 문자가 흐를 수 있게끔 하는 것(ex: 신문기사 사진).
// (9) 애니메이션 : 전환은 전/후 상태만 제어가 가능하지만, 애니메이션은 보다 복잡하고 자세하게 1-2-3-4까지의 복잡한 효과를 만들 수 있음.
// (10) 그리드 : 2차원의 레이아웃을 손쉽게 제어할 수 있는 역할
// (11) 다단 : 하나의 페이지에서 텍스트 단을 여러개로 나누는 것
// (12) 필터 : 흐림처리blur, 흑백처리grayscale, 반전처리reverse





// <2> 너비(width, height)

// (1) 일반적인 기능 - auto와 블럭/인라인 요소
// 요소의 width가로, height세로 너비를 설정하는 역할.
// -기본값 : auto(요소에 이미 들어있는 속성의 값)
// -단위 : px, em, vw 등 단위로 지정

// html 예시
// <div></div>

// css 예시
// div {
//   width: 100px;
//   height: 100px;
//   background-color: orange;
// }

// 이러한 상황에서 width를 주석처리하면 끝까지 색깔이 칠해진다.
// 이러한 상황에서 height를 주석처리하면 아예 보이지 않는다.

// <span>의 상황에서는?
// '인라인 요소'이기 때문에, auto시 포함한 콘텐츠 크기만큼 자동으로 줄어든다.

// <div>의 상황에서는?
// '블럭 요소'이기 때문에, auto시 가로사이즈는 최대만큼 늘어나고, 세로사이즈는 콘텐츠 크기만큼으로 줄어든다.


// (2) max 기능 : max-width, max-height
// 요소가 커질 수 있는 최대 가로/세로 너비
// -기본값: none(최대 너비 제한 없음)
// -단위 : px, em, vw 등 단위로 지정
// *auto : 잘 쓰지는 않음. 브라우저가 너비를 계산.


// (3) min 기능 : min-width, min-height
// 요소가 작아질 수 있는 최소 가로/세로 너비
// -기본값 : 0(최소 너비 제한 없음)
// -단위 : px, em, vw 등 단위로 지정
// *auto : 잘 쓰지는 않음. 브라우저가 너비를 계산.





// <3> CSS 단위

// px : 픽셀
// % : 상대적 백분율
// em : 요소의 글꼴 크기. 
//      ex) 해당 요소의 글꼴크기가 16px라고 한다면, 10em은 160px인 셈.
// rem : 루트 요소(html)의 글꼴 크기. 
//      => em이 관리하기가 힘들기 때문에 root쪽에다가 글꼴크기를 확정하면 rem으로 모든요소 컨트롤 가능.
// vw : 뷰포트 가로 너비의 백분율. 
//      ex) 1이라 한다면 뷰포트 가로너비의 1/100인 셈.
// vh : 뷰포트 세로 너비의 백분율. 
//      ex) 위의 내용과 동일. 세로너비.





// <4> 외부 여백(margin)

// 요소의 외부 여백을 지정하는 단축 속성. 음수활용 가능.
// 음수를 쓰게되면 떨어지는 것이 아니라 붙어버린다.

// 기본값: 0. 외부 여백 없음
// auto: 브라우저가 여백을 계산 - 가로(세로) 너비가 있는 요소의 가운데 정렬에 활용!
// 단위: px, em, vw등 단위로 지정
// % 단위 : 부모 요소의 가로너비에 대한 비율로 지정(잘 쓰는 것은 아님!)

// 그냥 margin: 00px 라고 하게되면 단순히 상하좌우의 모든 면을 다 지정하게된다.

// 하지만 top, bottom, left, right 등으로 지정이 가능하다.
// ex) margin-방향
// 요소의 외부 여백을 지정하는 기타 개별 속성들.

// 만약 margin: 00px, 00px;라고 하게되면 상하, 좌우로 나뉘어서 적용된다.
// 만약 margin: 00px, 00px, 00px;라고 하게되면 상, 좌우, 하로 나뉘어서 적용된다.
// 만약 margin: 00px, 00px, 00px, 00px;라고 하게되면 상, 우, 하, 좌로 나뉘어서 적용된다.





// <5> 내부 여백(padding)

// 요소의 내부 여백을 지정하는 단축 속성
// 요소의 크기가 커지게 된다.

// 기본값: 0. 내부 여백 없음.
// 단위 : px, em, vw 등 단위로 지정.
// %: 부모 요소의 가로 너비에 대한 비율로 지정. - 마진과는 다르게 유용하게 쓰임

// 마진과 동일하게 top, right, bottom, left 등으로 지정이 가능하다. padding-방향.
// 요소의 내부 여백을 지정하는 기타 개별 속성들.

// 만약 padding: 00px, 00px;라고 하게되면 상하, 좌우로 나뉘어서 적용된다.
// 만약 padding: 00px, 00px, 00px;라고 하게되면 상, 좌우, 하로 나뉘어서 적용된다.
// 만약 padding: 00px, 00px, 00px, 00px;라고 하게되면 상, 우, 하, 좌로 나뉘어서 적용된다.





// <6> 테두리 선(border)과 색상표현

// 요소의 테두리 선을 지정하는 단축 속성
// border: border-width(선-두께) border-style(선-종류) border-color(선-색상);
// 요소의 크기가 커지는 것이 기본적이다. 종류를 none으로 하면 없는 상태라 출력이 안된다.


// (1) border-width
// 요소 테두리 선의 두께
// medium, thin, thick 은 정확한 수치가 없으므로 쓰지 마라.
// 단위: px, em, % 등 단위로 지정
// 마진, 패딩과 같이 방향(top, right, bottom, left)을 지정 가능.


// (2) border-style
// 요소 테두리 선의 종류
// none없음, solid실선, dashed파선 - 많이 사용하는 종류들
// dotted점선, double두 줄 선, groove홈이 파인 모양, ridge솟은 모양, 
// inset요소 전체가 들어간 모양, outset요소 전체가 나온 모양
// 마진, 패딩과 같이 방향(top, right, bottom, left)을 지정 가능.


// (3) border-color
// 요소 테두리 선의 색상을 지정하는 단축 속성
// 기본값: black검정색
// 색상: 선의 색상
// transparent: 투명
// 마진, 패딩과 같이 방향(top, right, bottom, left)을 지정 가능.

// *색상표현
// 색상이름 : 브라우저에서 제공하는 색상 이름. red, tomato, royalblue...
// hex색상코드: 16진수 색상. #000, #ffffff
// rgb : 빛의 삼원색. rgb(255, 255, 255)
// rgba : 빛의 삼원색 + 투명도. rgba(0, 0, 0, 0.5)


// (4) 사용법
// border-방향-속성: 값;
// ex) border-bottom-color: red;





// <7> 모서리 둥글게(border-radius)

// 요소의 모서리를 둥글게 깎음.
// 기본값: 0. 둥글게 없음.
// 단위 : px, em, vw등 단위로 지정.

// 단위에 대한 개념은?
// 사각형의 끝자락에 원을 놓고, 그 원의 반지름에 해당하는 값으로 깎는 것. ex) 10px 같이.

// 마진, 패딩과 같이 방향(top, right, bottom, left)을 지정 가능.
// ex) border-radius: 0 10px 0 0;





// <8> 크기 계산(box-sizing)

// 요소의 크기 계산 기준을 지정
// 기본값: content-box. 요소의 내용(content)으로 크기 계산
// border-box: 요소의 내용 + padding + border로 크기 계산

// html 예시
// <div class="item">hello</div>
// <div class="item"></div>

// css 예시
// .item {
//   width: 100px;
//   height: 100px;
//   background-color: orange;
// }
// .item:first-child {
//   border: 4px solid red;
//   padding: 10px;
// }

// 이런 상황일 시, hello가 들어간 첫번째 div의 사이즈는 128x128가 된다.
// 상하좌우에 하나씩 100+10+4가 각각 들어가니까 그렇다.

// 하지만 이를 조정하려면 그냥 box-sizing: border-box;라고 하면 된다.
// 이를 적게되면 기본width와 height인 100px안에 border, padding 등의 값이 포함되게 된다.





// <9> 넘침 제어(overflow)

// 요소의 크기 이상으로 내용이 넘쳤을 때, 보여짐을 제어하는 단축 속성.
// 기본값: visible. 넘친 내용을 그대로 보여줌.
// hidden: 넘친 내용을 잘라냄.
// scroll: 넘친 내용을 잘라냄, 스크롤바 생성 - 잘 사용하진 않음.
// auto: 넘친 내용이 있는 경우에만 잘라내고 스크롤바 생성.

// scroll을 사용하게 되면 상하좌우 모두 스크롤바가 생기지만,
// 넘치는 부분만 스크롤을 쓰게 하고 싶다면 auto를 쓰면 된다.

// overflow-x, overflow-y를 쓰게되면 x,y축을 개별적으로 제어 가능하다.





// <10> 출력 특성(display)

// 요소의 화면 출력(보여짐) 특성.


// (1) 기본값(각 요소에 이미 지정되어 있는 값)
// block : 상자(레이아웃) 요소. div. => 인라인 요소를 블럭처럼 사용하고 싶을 때.
// inline : 글자 요소. span. => 블럭 요소를 인라인 요소처럼 사용하고 싶을 때.
// inline-block : 글자+상자 요소
// ex) display: block;


// (2) 따로 지정해서 사용하는 값.
// flex: 플렉스 박스(1차원 레이아웃)
// gird: 그리드(2차원 레이아웃)
// none: 보여짐 특성 없음, 화면에서 사라짐.


// 기타: table, table-row, table-cell 등





// <11> 투명도(opacity)

// 요소의 투명도
// 기본값: 1. 불투명.
// 0~1: 0부터 1사이의 소수점 숫자.

// ex) opacity: 0.07; => 7%의 불투명도
// opacity: 0.7; => 70%의 불투명도
// opacity: 1; => 100%의 불투명도





// <12> 글꼴

// 글꼴을 변화시키는 것에 대한 이야기

// <h> 태그 일시
// (1) font-size : 글꼴 사이즈
// 16px : 기본크기
// 단위 : px, em 등..

// (2) font-weight : 글꼴의 두께
// normal, 400 
// bold, 700
// bolder, lighter
// 100~900 설정가능

// (3) font-style : 글자의 기울기
// italic 등...


// <p> 태그 일시
// (4) width: 문단 태그의 넓이
// padding, border, box-sizing 사용가능

// (5) line-height : 한 줄의 높이, 행간과 유사
// 숫자 : 요소의 글꼴 크기의 배수로 지정
// 단위 : Px, em 등..
// 만약 기본폰트사이즈인 16px일때 line-height를 2로 하면 2배인 32px이고,
// 이를 정렬할 때는 행간의 중심에 글자들이 위치하게 된다


// (6) font-family: 글꼴1, "글꼴2", ...글꼴계열;
// => 띄어쓰기 등 특수문자가 포함된 글꼴 이름은 큰 따옴표로 묶는다.
// 글꼴계열은 필수로 작성한다.
// 가장 먼저 있는 글꼴을 사용하되, 만약 없다면 그 뒤의 글꼴들을 사용하는 것이 알고리즘.





// <13> 문자

// (1) color : 글자의 색상
// 기본값 : rgb(0,0,0) 검정색
// 색상 알아서 추가

// (2) text-align : 문자의 정렬 방식
// left, right, center, justify(양쪽정렬)

// (3) text-decoration: 문자의 장식(선)
// none, underline, overline(윗선), line-through(중앙선)

// (4) text-indent: 문자 첫 줄의 들여쓰기
// 0 들여쓰기 없음
// 단위 px, em, rem 등
// 음수를 사용하면 내어쓰기





// <14> 배경

// (1) background-color : 요소의 배경색상
// 기본값: 투명함
// 색상 지정가능

// (2) background-image : 요소의 배경 이미지 삽입
// 기본값: none
// url("경로") 이미지 경로 함수

// (3) background-size: 요소의 배경 이미지 크기
// 기본값: auto(이미지의 실제 크기)
// 단위: px, em, rem 등 단위(하나만 써도 가로세로 비율맞게 적용된다)
// cover: 비율을 유지, 요소의 더 넓은 너비에 맞춤(자동으로 맞춰짐)
// contain: 비율을 유지, 요소의 더 짧은 너비에 맞춤

// (4) background-repeat: 요소의 배경 이미지 반복
// 기본값 repeat: 이미지를 수직, 수평반복
// repeat-x 이미지를 수평반복
// repeat-y 이미지를 수직반복
// no-repeat 반복 없음

// (5) background-position: 요소의 배경이미지 위치
// 기본값 0% => x:0, y:0인 시작점은 왼쪽 상단
// 방향: top, bottom, left, right, center 방향
// 단위: px, em, rem

// (6) background-attachment: 요소의 배경 이미지 스크롤 특성
// 기본값: scroll 이미지가 요소를 따라서 같이 스크롤
// fixed: 이미지가 뷰포트에 고정, 스크롤x
// local: 요소 내 스크롤 시 이미지가 같이 스크롤